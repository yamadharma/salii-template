#!/bin/sh
#
# SARA install script for LISA nodes: 
# Initial Authors: Bas van der Vlies and Jaap Dijkshoorn
#
# SVN Info:
#	$Id: masterscript.new 470 2012-03-08 15:02:44Z bas $

# Pull in variables left behind by the linuxrc script.
# This information is passed from the linuxrc script on the autoinstall media 
# via /tmp/variables.txt. 
#
#set -x

. /tmp/variables.txt

# Load functions and other variables
. /etc/init.d/functions

# Load local finctions
. ${SCRIPTS_DIR}/functions

logmsg "load hardware profile"
check_profile

set_disklabel_type

get_arch

NO_LISTING=yes
if [ -z $NO_LISTING ]; then
    VERBOSE_OPT="v"
else
    VERBOSE_OPT=""
fi

# Remove .master from script name
#
SARA_IMAGE=`echo $0 | cut -d. -f1`

echo $0
echo $IMAGENAME

[ -z $IMAGENAME ] && IMAGENAME=`basename $SARA_IMAGE`
[ -z $IMAGENAME_LIST ] && IMAGENAME_LIST="${IMAGENAME}-${ARCH} ${IMAGENAME}_unattended win-${ARCH}_unattended"
#[ -z $IMAGENAME_LIST ] && IMAGENAME_LIST="${IMAGENAME}-${ARCH} ${IMAGENAME}-${ARCH}-part2 ${IMAGENAME}_unattended win-${ARCH}_unattended"
#[ -z $IMAGENAME_LIST ] && IMAGENAME_LIST="webc ${IMAGENAME}_unattended"
# [ -z $OVERRIDES ] && OVERRIDES=`basename $SARA_IMAGE`
[ -z $OVERRIDES ] && OVERRIDES="dosfiles netinst $HARDWARECLASS $ROOMNAME"
GROUP_OVERRIDES=OVERRIDES

echo $IMAGENAME
export IMAGENAME
save_param IMAGENAME "${IMAGENAME}"

echo $IMAGENAME_LIST
export IMAGENAME_LIST
save_param IMAGENAME_LIST "${IMAGENAME_LIST}"

## Sort disk, first disk to be found are sd* disk
#
disk_enumerate "sd hd vd cciss"

set_partition_numbers

logmsg "format linux partitions"
# create_filesystem ${DISK0}${windows_pn} fat32 windows
create_filesystem_win10

logmsg "mount points"
# create_disk_mount_file 0 / fat32 ${DISK0}1

logmsg "mount_disks"
# mount_disks
mkdir /a
mount ${DISK0}${windistro_pn} /a -t vfat -o iocharset=cp437
mkdir /a/tmp

mkdir /c
mount ${DISK0}${windows_pn} /c -t vfat -o iocharset=cp437
mkdir /c/tmp

## End disk creation and mounting

write_local_variables
disk_size


### BEGIN mount proc in image for tools like System Configurator ###
### BEGIN mount sysfs in image for tools that might be run during chroot ### 
#logmsg "chroot_mount_system_fs"
#chroot_mount_system_fs
### END mount proc in image for tools like System Configurator ###
### END mount sysfs in image for tools that might be run during chroot ### 

################################################################################
#
#   Lay the image down on the freshly formatted disk(s)
#
#if [ ! -z $MONITOR_SERVER ]; then
#    start_report_task
#fi

## Let's get the image
# TODO: rewrite this so we can use PROTOCOL instead of using BITTORRENT yes/no

logmsg "getimage_local"
getimage_local

# Leave notice of which image is installed on the client
echo $IMAGENAME > /a/IMAGE_LAST_SYNCED_TO || shellout

################################################################################
#
#   Process override directories
#
for OVERRIDE in $OVERRIDES
do
    mountpoint=/a
    # Use rsync
    logmsg "rsync -av --numeric-ids $IMAGESERVER::overrides/${IMAGENAME}.d/$OVERRIDE/ ${mountpoint}/"
    rsync -av --numeric-ids $IMAGESERVER::overrides/${IMAGENAME}.d/$OVERRIDE/ ${mountpoint}/ || logmsg "Override directory $OVERRIDE doesn't seem to exist, but that may be OK."
done

#for i in ${IMAGENAME_LIST}
#do

#killall -9 aria2c
#killall -9 aria2c
#killall -9 aria2c

#logmsg "/usr/bin/aria2c --enable-rpc --human-readable=false --dir /a ${TORRENTS_DIR}/image-${i}.tar.gz.torrent"
#/usr/bin/aria2c --enable-rpc --human-readable=false --dir /a ${TORRENTS_DIR}/image-${i}.tar.gz.torrent --seed-time=1

#killall -9 aria2c
#killall -9 aria2c
#killall -9 aria2c

#logmsg "Extracting image from image-${i}.tar.gz"
#cd /a/
#zcat /a/image-${i}.tar.gz | tar -pxf -
#rm -f /a/image-${i}.tar.gz

# Leave notice of which image is installed on the client
#echo ${i} >> /a/IMAGE_LAST_SYNCED_TO || shellout
#done

#if [ "$GRUB2" == "yes" ]
#then
#	grub2_install $DISK0
#fi

#mount_pseudofs

#
################################################################################


################################################################################
#
#   Post Install Scripts
#

# run_post_install_scripts

unattend_prepare_win10
boot_disk_prepare_win10
save_and_clean_mbr_win10

#
################################################################################

# grub2_install_local $DISK0

################################################################################
#
#   Save virtual console session in the imaged client
#
if [ ! -z $MONITOR_SERVER ]; then
    if [ "x$MONITOR_CONSOLE" = "xyes" ]; then 
        [ ! -d /a/root ] && mkdir -p /a/root
        cp -f /var/log/sali.log /a/root/sali.log
    fi
fi

#
################################################################################

################################################################################
#
#   Unmount filesystems
#

#logmsg "chroot_umount_system_fs"
#chroot_umount_system_fs

logmsg "umount_disks"
umount_disks

#
################################################################################


################################################################################
#
#   Tell the image server we are done
#   
rsync $IMAGESERVER::scripts/imaging_complete > /dev/null 2>&1
logmsg "Imaging completed"
#
################################################################################

reboot
