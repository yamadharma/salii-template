# SALI:2.0
#  ^ Required, this is used to check if the master_script is compatible
#    It must be on the firstline of the master script

# An example use of the new master_script
#  required functions; initialize and partition


###
# Usage: getimage_torrent
#
# Fetch the image via the torrent protocol, is configured by the image_torrent option in
# the master_script
#
###
getimage_torrent(){

    ## If SALI_TORRENT_STAGING_DIR is not set, give it a default value
    if [ -z "${SALI_TORRENT_STAGING_DIR}" ]
    then
        SALI_TORRENT_STAGING_DIR="${SALI_TARGET}/tmp"
    fi
    save_variables

    ## Say hello
    p_service "Fetching image via torrent"
    p_comment 10 "url: ${SALI_TORRENT_URL}"

    ## Check if we need to download the torrent via rsync, or we can specify it as a url
    torrent_filename=$(download_file "${SALI_TORRENT_URL}")

    ## Based on the backend, use that option
    case "${SALI_TORRENT_BACKEND}" in
        transmission)
            p_comment 10 "using transmission"
            getimage_transmission $torrent_filename
        ;;
    esac

    ## Based on the verbose mode show the extraction
    if [ "${SALI_VERBOSE_LEVEL}" -ge 256 ]
    then
        tar_opts="--numeric-owner -pxvf"
    else
        tar_opts="--numeric-owner -pxvf"
    fi

    ## We need to remove the .torrent from the filename
    SALI_TARBALL="$(echo $torrent_filename|sed 's/.torrent//g')"
    SALI_TARBALL="${SALI_TORRENT_STAGING_DIR}/$(basename $SALI_TARBALL)"

    ## Change our dir to where we must unpack
    cd $SALI_TARGET

    ## Unpack
    case "${SALI_TARBALL}" in
        *.tar.gz)
            zcat "${SALI_TARBALL}" | tar $tar_opts -
	    ;;
        *.tar.bz2)
            bzcat "${SALI_TARBALL}" | tar $tar_opts -
        ;;
        *.tar.xz)
            xzcat "${SALI_TARBALL}" | tar $tar_opts -
        ;;	
        *.tar.zst)
            zstdcat "${SALI_TARBALL}" | tar $tar_opts -
        ;;	
	*.tar)
            tar $tar_opts "${SALI_TARBALL}"
        ;;
        *)
            p_comment 10 "Unsupport file-format ${SALI_TARBALL}"
            return 1
        ;;
    esac

    if [ $? -ne 0 ]
    then
        p_comment 10 "An error has occured"
        return 1
    fi

    p_section "Finished installing node"
}



## Intialize the SALI environment
# required
initialize(){
    ## variables
    #SALI_SSHD_KEYS="http://${SALI_IMAGESERVER}:8000/ssh_keys.tar"

    ## Currently only rsync supported, also scripts are always fetched, even wen pre_installation and post_installation
    ## have not been configured
    SALI_SCRIPTS="rsync://${SALI_IMAGESERVER}/scripts"

    ## Where can I find the image (for torrent and rsync), based on the variable PROTOCOL
    ## rsync of bittorrent is used, variables IMAGESERVER and IMAGENAME must be available
    ## via de linux cmd line
    image_torrent "rsync://${SALI_IMAGESERVER}/torrents/${SALI_IMAGENAME}.tar.zst.torrent"
    image_rsync "${SALI_IMAGESERVER}::${SALI_IMAGENAME}" options=aHS

    ## Optional you can specify the root password, you must specify the actual passwd encrypted string
    ## BUT we recommend use ssh pub keys!
    #password root '$6$LXAd1TSI0zeMoCW$LPomOOj3ilnrxyl.xtN30kmB0uAFLZo1.C5VtxUdEzXE0MrJp4j7vFMUID/ol31W8bVNSMJYNg/B8R5mmQmB1/'
    #ssh_authorized_key root "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC9B0Fk5Y3T6V/lmljyNIKq7SjUsq+Nl6bxV3SuXM1iJs+0LtJtaTGw5Q7JZDhG07akdUubX/v77m7k47FUczumCqKk0capYooc5z+yGVSXroj8zjJMwiCsGa/i1ejYSgSPlhBZbrOv0JDaFUcFjuuOWSz5GpR6BW8k1fcCL3qDp2amcMbjXPiul0HqK7zt9by17Yio8FkqrCGX9EB4SiFyWwP6YYbwtnwZwf4+MKPvioJUq48OUla6fEJNWGq0s3Q9hmIUdGKsfi87LOIJbSHKFUhk1cYegxGSfQkWbHcLK+61jbXuw0frNeyjWTrPpjlW0GzBUGQ1qe/jPB0kDW3n dennis@llt0012"
    export UEFI=1
}

## The partition function
# required
partition(){    

    # Load local finctions
    . ${SALI_SCRIPTS_DIR}/functions


    SALI_TARGET=/target
    mkdir -p ${SALI_TARGET}

    disks_detect nvme sd hd      # <order>

    case "$(basename $DISK0)" in
        nvme*)
            PART_PREFIX="p"
            ;;
        *)
            PART_PREFIX=""
            ;;
    esac
    
    logmsg "Format Windows partitions"
    mkfs.ntfs -C -f -L windows "${DISK0}"${PART_PREFIX}${windows_pn}
    mkfs.ntfs -C -f "${DISK0}"${PART_PREFIX}${winre_pn}
    mkfs.vfat -c -n fat -F32 "${DISK0}"${PART_PREFIX}${windistro_fat_pn}
    mkfs.ntfs -C -f -L windistro "${DISK0}"${PART_PREFIX}${windistro_ntfs_pn}

    logmsg "swapon ${DISK0}${PART_PREFIX}${swap_pn}"
    swapon ${DISK0}${PART_PREFIX}${swap_pn}
}

disks_mount() {
    # Load local finctions
    . ${SALI_SCRIPTS_DIR}/functions

    disks_detect nvme sd hd
    
    case "$(basename $DISK0)" in
        nvme*)
            PART_PREFIX="p"
            ;;
        *)
            PART_PREFIX=""
            ;;
    esac
    
    SALI_TARGET=/target
    mkdir -p ${SALI_TARGET}
 
    p_comment 0 "Mount disks"

    mkdir -p /esp
    mount -tvfat "${DISK0}"${PART_PREFIX}${uefi_pn} /esp
    
    ## Windows
    mkdir -p /fat
    mount -tvfat "${DISK0}"${PART_PREFIX}${windistro_fat_pn} /fat
    ## Windistro
    mount -tntfs-3g "${DISK0}"${PART_PREFIX}${windistro_ntfs_pn} ${SALI_TARGET}
}

getimage_torrent_(){
    ## transmission-daemon мешает
    killall -9 transmission-daemon
    killall -9 transmission-daemon

    SALI_TARGET=/target
#   mkdir -p ${SALI_TARGET}/tmp
    
    ## If SALI_TORRENT_STAGING_DIR is not set, give it a default value
    if [ -z "${SALI_TORRENT_STAGING_DIR}" ]
    then
        # SALI_TORRENT_STAGING_DIR="${SALI_TARGET}/tmp"
        SALI_TORRENT_STAGING_DIR="${SALI_TARGET}"
    fi
    mkdir -p "${SALI_TORRENT_STAGING_DIR}"
    save_variables

    ## Say hello
    p_service "Fetching image via torrent"
    p_comment 10 "url: ${SALI_TORRENT_URL}"

    ## Check if we need to download the torrent via rsync, or we can specify it as a url
    torrent_filename=$(download_file "${SALI_TORRENT_URL}")

    ## Based on the backend, use that option
#    case "${SALI_TORRENT_BACKEND}" in
#        transmission)
#            p_comment 10 "using transmission"
#            getimage_transmission $torrent_filename
#        ;;
#    esac

    cd "${SALI_TORRENT_STAGING_DIR}"
    ctorrent ${torrent_filename} -e 0 -I ${IPADDR} -i ${IPADDR}

    ## Based on the verbose mode show the extraction
    if [ "${SALI_VERBOSE_LEVEL}" -ge 256 ]
    then
        tar_opts="-pxvf"
    else
        tar_opts="-pxvf"
    fi

    ## We need to remove the .torrent from the filename
    SALI_TARBALL="$(echo $torrent_filename|sed 's/.torrent//g')"
    SALI_TARBALL="${SALI_TORRENT_STAGING_DIR}/image-$(basename $SALI_TARBALL)"

    echo !!!!!!!!!! $SALI_TARBALL

    ## Change our dir to where we must unpack
    cd $SALI_TARGET

    ## Unpack
    case "${SALI_TARBALL}" in
        *.tar.gz)
            zcat "${SALI_TARBALL}" | tar $tar_opts -
        ;;
        *.tar)
            tar $tar_opts "${SALI_TARBALL}"
        ;;
        *)
            p_comment 10 "Unsupport file-format ${SALI_TARBALL}"
            return 1
        ;;
    esac

    if [ $? -ne 0 ]
    then
        p_comment 10 "An error has occured"
        return 1
    fi

    rm ${SALI_TARBALL}    

################################################################################
#
#   Process override directories
#

    [ -z $IMAGENAME ] && IMAGENAME="win10"
    [ -z $OVERRIDES ] && OVERRIDES="unattend"
    # [ -z $OVERRIDES ] && OVERRIDES="dosfiles netinst $HARDWARECLASS $ROOMNAME"

    for OVERRIDE in $OVERRIDES
    do
	logmsg "rsync -av --numeric-ids ${SALI_IMAGESERVER}::overrides/${SALI_IMAGENAME}/$OVERRIDE/ ${SALI_TARGET}/"
	rsync -av --numeric-ids ${SALI_IMAGESERVER}::overrides/${SALI_IMAGENAME}/${OVERRIDE}/* ${SALI_TARGET}/ || logmsg "Override directory $OVERRIDE doesn't seem to exist, but that may be OK."
    done

    run_script unattend_prepare_win10 
    
}


## Simplify running post/pre scripts. Instead of specify the order number and image
## name as script name, just specify which scripts you want to use. You can easily
## change the order per type of install and re-use the same scripts

## A function which is called before the partitioning and installation
# optional
#pre_installation(){
#    run_script my_pre_script
#}

## A function which is called after fetching the image
# optional

post_installation(){

    # Load local finctions
    . ${SALI_SCRIPTS_DIR}/functions

    SALI_TARGET=/target

    ln -s ${SALI_SCRIPTS_DIR} /scripts

################################################################################
#
#   Process override directories
#

    [ -z $SALI_IMAGENAME ] && SALI_IMAGENAME="win10-x86_64"
    [ -z $OVERRIDES ] && OVERRIDES="unattend"
    # [ -z $OVERRIDES ] && OVERRIDES="dosfiles netinst $HARDWARECLASS $ROOMNAME"    

    for OVERRIDE in $OVERRIDES
    do
	# Use rsync
	logmsg "rsync -av --numeric-ids ${SALI_IMAGESERVER}::overrides/${SALI_IMAGENAME}/$OVERRIDE/ ${SALI_TARGET}"
	rsync -av --numeric-ids ${SALI_IMAGESERVER}::overrides/${SALI_IMAGENAME}/$OVERRIDE/* ${SALI_TARGET}/ || logmsg "Override directory $OVERRIDE doesn't seem to exist, but that may be OK."
    done

    run_script unattend_prepare_win10
    
    ## Copy bootable image
    rsync -ai --exclude='sources/' --exclude='tmp/' --exclude='Drivers/' --exclude='Office/' ${SALI_TARGET}/* /fat
    mkdir -p /fat/sources
    cp ${SALI_TARGET}/sources/boot.wim /fat/sources/     

    ## run an shell script in a chrooted environment (the functions file is NOT available in
    ## the chroot env)
    # run_script hostconfig
    # run_script grub2-install
    # boot_disk_prepare_win10
    # save_and_clean_mbr_win10

    rm -rf ${SALI_TARGET}/tmp/*
    rm -rf /esp/EFI/Microsoft

    p_section "Finished installing node"
   
}

# Local Variables:
# mode: shell-script
# End:
